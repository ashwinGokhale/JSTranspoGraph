{"version":3,"file":"app.js","sources":["src/helpers/context_menu.js","src/helpers/external_links.js","src/lib/vehicle.js","src/lib/graph.js","src/lib/edge.js","src/lib/location.js","src/lib/passenger.js","src/settings/settings.js","src/app.js"],"sourcesContent":["// This gives you default context menu (cut, copy, paste)\n// in all input fields and textareas across your app.\n\nimport { remote } from 'electron';\n\nconst Menu = remote.Menu;\nconst MenuItem = remote.MenuItem;\n\nconst isAnyTextSelected = () => {\n  return window.getSelection().toString() !== '';\n};\n\nconst cut = new MenuItem({\n  label: 'Cut',\n  click: () => {\n    document.execCommand('cut');\n  },\n});\n\nconst copy = new MenuItem({\n  label: 'Copy',\n  click: () => {\n    document.execCommand('copy');\n  },\n});\n\nconst paste = new MenuItem({\n  label: 'Paste',\n  click: () => {\n    document.execCommand('paste');\n  },\n});\n\nconst normalMenu = new Menu();\nnormalMenu.append(copy);\n\nconst textEditingMenu = new Menu();\ntextEditingMenu.append(cut);\ntextEditingMenu.append(copy);\ntextEditingMenu.append(paste);\n\ndocument.addEventListener('contextmenu', (event) => {\n  switch (event.target.nodeName) {\n    case 'TEXTAREA':\n    case 'INPUT':\n      event.preventDefault();\n      textEditingMenu.popup(remote.getCurrentWindow());\n      break;\n    default:\n      if (isAnyTextSelected()) {\n        event.preventDefault();\n        normalMenu.popup(remote.getCurrentWindow());\n      }\n  }\n}, false);\n","// Convenient way for opening links in external browser, not in the app.\n// Useful especially if you have a lot of links to deal with.\n//\n// Usage:\n//\n// Every link with class \".js-external-link\" will be opened in external browser.\n// <a class=\"js-external-link\" href=\"http://google.com\">google</a>\n//\n// The same behaviour for many links can be achieved by adding\n// this class to any parent tag of an anchor tag.\n// <p class=\"js-external-link\">\n//    <a href=\"http://google.com\">google</a>\n//    <a href=\"http://bing.com\">bing</a>\n// </p>\n\nimport { shell } from 'electron';\n\nconst supportExternalLinks = (event) => {\n  let href;\n  let isExternal = false;\n\n  const checkDomElement = (element) => {\n    if (element.nodeName === 'A') {\n      href = element.getAttribute('href');\n    }\n    if (element.classList.contains('js-external-link')) {\n      isExternal = true;\n    }\n    if (href && isExternal) {\n      shell.openExternal(href);\n      event.preventDefault();\n    } else if (element.parentElement) {\n      checkDomElement(element.parentElement);\n    }\n  };\n\n  checkDomElement(event.target);\n};\n\ndocument.addEventListener('click', supportExternalLinks, false);\n","/**\n * Created by ashwin on 2/25/17.\n */\n\nexport default class Vehicle {\n    static vehicleNames = [\"Aircraft\", \"Bart\", \"Bicycle\", \"Bus\", \"Car\", \"Taxi\"];\n\n    constructor(name, speedOfTravel, waitTime, unitCost, typeOfCost) {\n        this.name = name;\n        this.speedOfTravel = speedOfTravel;\n        this.waitTime = waitTime;\n        this.unitCost = unitCost;\n        this.typeOfCost = typeOfCost;\n        this.location = undefined;\n    }\n\n    // setVehicle = (name, speedOfTravel, waitTime, unitCost, typeOfCost) => {\n    //     Vehicle.vehicles[name] = new Vehicle(name, speedOfTravel, waitTime, unitCost, typeOfCost);\n    // };\n\n    // getVehicle = (name) => {\n    //     return Vehicle.vehicles[name];\n    // };\n\n    toString = () => {\n        return this.name;\n    };\n\n}\n\n// module.exports = {\n//     vehicleNames: Vehicle.vehicleNames,\n//     setVehicle: setVehicle,\n//     getVehicle: getVehicle,\n//     getVehicles: () => {\n//         // Initialize all Vehicles and add to the Vehicle HashMap\n\n//         for (let i = 0; i < 6; i++) {\n//             switch (i) {\n//                 // Aircraft, Bart, Bicycle, Bus, Car, Taxi\n//                 case 0:\n//                     setVehicle(\"Aircraft\", 575, 120, 400, 1);\n//                     break;\n//                 case 1:\n//                     setVehicle(\"Bart\", 60, 10, 8, 1);\n//                     break;\n//                 case 2:\n//                     setVehicle(\"Bicycle\", 10, 0, 0, 1);\n//                     break;\n//                 case 3:\n//                     setVehicle(\"Bus\", 30, 10, 0.5, 1);\n//                     break;\n//                 case 4:\n//                     setVehicle(\"Car\", 50, 0, 3, 3);\n//                     break;\n//                 case 5:\n//                     setVehicle(\"Taxi\", 50, 10, 1.5, 2);\n//                     break;\n//             }\n//         }\n\n//         return Vehicle.vehicles;\n//     }\n// };","/**\n * Created by ashwi on 2/13/2017.\n */\n\nimport TinyQueue from 'tinyqueue'\n//const TinyQueue = require('tinyqueue');\n\nexport default class Graph{\n\tconstructor() {\n\t\tthis.graph = {};\n\t}\n\n\taddVertex(node){\n\t\tthis.graph[node.name] = node;\n\t};\n\n\tcontainsLocation(node) {\n\t\treturn this.graph[node.name] != undefined;\n\t};\n\n\taddEdge(from, to, weight, type) {\n\t\tif (!this.containsLocation(from))\n\t\t\tthis.addVertex(from);\n\n\t\tif (!this.containsLocation(to))\n\t\t\tthis.addVertex(to);\n\n\t\tfrom.addNeighbor(to, weight, type);\n\t\tto.addNeighbor(from, weight, type);\n\t};\n\n\t// Implementation of Dijkstra's algorithm\n\t// Computes paths for each Passenger p\n\tcomputePaths(p) {\n\n\t\tvar source = p.currentLoc;\n\n\t\t// Must reset every location distance and previous values upon each function call\n\t\tvar vals = Object.keys(this.graph).map((key) =>{\n\t\t\treturn this.graph[key];\n\t\t});\n\n\t\tvals.forEach((x) =>{\n\t\t\tx.dist = Infinity;\n\t\t\tx.prev = null;\n\t\t});\n\n\t\tsource.dist = 0;\n\t\tvar vertexQueue = new TinyQueue();\n\t\tvertexQueue.push(source);\n\n\t\twhile (vertexQueue.peek()) {\n\n\t\t\t// Pop the Location with the least distance\n\t\t\tvar u = vertexQueue.pop();\n\n\t\t\t// Visit each edge exiting u with the specified vehicle preference\n\t\t\tlet pref = p.vehiclePreference;\n\t\t\tlet adj = u.adjacent;\n\t\t\tadj[pref].forEach((e) => {\n\t\t\t\tvar v = e.to;\t// Location v\n\t\t\t\tvar alt = u.dist + e.weight;\t// Calculate alternative cost (double)\n\t\t\t\tif (alt < v.dist) {\n\n\t\t\t\t\t// Remove v from priority queue\n\t\t\t\t\tvar tempList = [];\n\t\t\t\t\tvar toRemove = vertexQueue.pop();\n\t\t\t\t\ttempList.push(toRemove);\n\t\t\t\t\twhile(toRemove != v && vertexQueue.peek()){\n\t\t\t\t\t\ttoRemove = vertexQueue.pop();\n\n\t\t\t\t\t\tif (toRemove != v)\n\t\t\t\t\t\t\ttempList.push(toRemove);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add items back to the queue\n\t\t\t\t\ttempList.forEach((item) => {\n\t\t\t\t\t\tvertexQueue.push(item);\n\t\t\t\t\t});\n\n\t\t\t\t\tv.dist = alt;\n\t\t\t\t\tv.prev = u;\n\t\t\t\t\tvertexQueue.push(v);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport const getShortestPathTo = (target) => {\n\tvar path = [];\n\tfor (var vertex = target; vertex != null; vertex = vertex.prev)\n\tpath.push(vertex);\n\n\tpath.reverse();\n\n\t// If no possible path, path will be [currentLoc, currentLoc]\n\tif (path.length == 1)\n\t\tpath.push(path[0]);\n\n\treturn path;\n};","/**\n * Created by ashwin on 2/25/17.\n */\n\nexport default class Edge {\n    constructor(from, to, weight, vehicleType) {\n        this.from = from;\n        this.to = to;\n        this.weight = weight;\n        this.vehicleType = vehicleType;\n    }\n}\n\n// function Edge (from, to, weight, vehicleType) {\n\n//     this.from = from;\n//     this.to = to;\n//     this.weight = weight;\n//     this.vehicleType = vehicleType;\n// }\n\n// module.exports = {\n//     createPaths: () => {\n//         const Location = require('./location');\n//         //const Graph = require('./graph');\n//         const pathsTxt = fs.readFileSync(path.resolve(__dirname, '../settings/Paths.txt'), 'utf8');\n//         const lines = pathsTxt.trim().split(/\\s*[\\r\\n]+\\s*/g).slice(1);    // startPoint,destPoint\n//         return lines.map((line) => {\n//             var payload = line.split(\",\");\n\n//             var from = Graph.graph[payload[0]];\n//             var to = Graph.graph[payload[1]];\n//             for (var i = 0; i < 6; i++) {\n//                 if (from.vehicleTypes[i] && to.vehicleTypes[i])\n//                     Graph.addEdge(from, to, Location.getDistance(from,to), from.vehicles[i]);\n//             }\n\n//         })\n//     },\n//     createEdge: (from, to, weight, vehicleType) => {\n//         return new Edge(from, to, weight, vehicleType);\n//     }\n// };\n","const path = require('path');\n\nimport Vehicle from './vehicle';\nimport Graph from './graph';\nimport Edge from './edge';\n\nexport default class Location {\n    constructor(name, latitude, longitude, x, y, vehicleTypes, vehicles) {\n        this.name = name;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.vehicleTypes = vehicleTypes;\n\t\tthis.vehicles = vehicles;\n\t\tthis.lat = latitude;\n\t\tthis.lon = longitude;\n\n\t\t// Initialize Adjacency HashMap and map each vehicle to an ArrayList of Edges\n\t\tthis.adjacent = {};\n        vehicles.forEach((payload) => {\n            if (payload) {\n                this.adjacent[payload.name] = [];\n            }\n        });\n    }\n\n    addNeighbor = (neighbor, weight, vehicle) => {\n        var e = new Edge(this, neighbor, weight, vehicle);\n        if (this.adjacent[vehicle.name] != undefined && !this.adjacent[vehicle.name].includes(e)) {\n            this.adjacent[vehicle.name].push(e);\n        }\n    };\n}\n\n// function Location(line) {\n    // let i;\n\n    // // Split each line into its respective parameters\n    // var payload = line.split(\",\");\n\n    // // // Split vehicle types and parse them based on their values\n    // var types = payload[5].split(\"|\");\n    // var vehicleTypes = new Array(types.length);\n    // for (i = 0; i < types.length; i++)\n    //     vehicleTypes[i] = types[i] === \"1\";\n\n\n    // var vehiclePayload = [];\n\n    // // Initialize all Vehicles at that location\n    // for (i = 0; i < vehicleTypes.length; i++) {\n    //     if (vehicleTypes[i]) {\n    //         let v = Vehicle.getVehicle(Vehicle.vehicleNames[i]);\n    //         vehiclePayload.push(v);\n    //     } else\n    //         vehiclePayload.push(null);\n    // }\n\n//     this.name = payload[0];\n//     this.x = parseFloat(payload[3]);\n//     this.y = parseFloat(payload[4]);\n//     this.vehicleTypes = vehicleTypes;\n//     this.vehicles = vehiclePayload;\n//     this.lat = parseInt(payload[1]);\n//     this.lon = parseInt(payload[2]);\n//     this.dist = Infinity;\n//     this.prev = null;\n\n//     // Initialize Adjacency HashMap and map each vehicle to an ArrayList of Edges\n\n//     this.adjacent = {};\n//     vehiclePayload.forEach((payload) => {\n//         if (payload) {\n//             this.adjacent[payload.name] = [];\n//         }\n//     })\n// }\n\n// Location.prototype.addNeighbor = function(neighbor, weight, vehicle) {\n//     var e = Edge.createEdge(this, neighbor, weight, vehicle);\n//     if (this.adjacent[vehicle.name] != undefined && !this.adjacent[vehicle.name].includes(e)) {\n//         this.adjacent[vehicle.name].push(e);\n//     }\n// };\n\nexport const getDistance = (loc1, loc2) => {\n    return Math.sqrt(Math.pow(loc2.x - loc1.x, 2) + Math.pow(loc2.y - loc1.y, 2));\n};\n\nexport const getHaversineDistance = (l1, l2) => {\n    var lat1 = l1.lat;\n    var lon1 = l1.lon;\n    var lat2 = l2.lat;\n    var lon2 = l2.lon;\n\n    var R = 6371; // meters\n\n    var φ1 = Math.PI / 180 * (lat1);\n    var φ2 = Math.PI / 180 * (lat2);\n    var Δφ = Math.PI / 180 * (lat2 - lat1);\n    var Δλ = Math.PI / 180 * (lon2 - lon1);\n\n    var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    var d = R * c;\n\n    return d * 0.621371;\n};\n\n// module.exports = {\n//     getLocations: () => {\n//         const locationsTxt = fs.readFileSync(path.resolve(__dirname, '../settings/Locations.txt'), 'utf8');\n//         const lines = locationsTxt.split('\\n').slice(1);\n//         return lines.map((line) => {\n//             let loc = new Location(line);\n//             // Create a new Location object and add it to the list\n//             console.log('Graph: ')\n//             console.log(Graph.locations);\n//             Graph.locations.push(loc);\n//             Graph.addVertex(loc);\n//             return loc;\n//         })\n//     },\n//     getDistance: getDistance\n// };","const path = require('path');\n\nexport default class Passenger {\n    constructor(name, currentLoc, dest, preference, vehiclePreference) {\n        this.name = name;\n        this.currentLoc = currentLoc;\n        this.dest = dest;\n        this.preference = preference;   // 1 for shortest time, 2 for lowest cost\n        this.vehiclePreference = vehiclePreference;\n    }\n}\n","import Vehicle from '../lib/vehicle';\nimport Location, { getDistance } from '../lib/location';\nimport Passenger from '../lib/passenger';\n//import Edge from '../lib/edge';\nimport Graph from '../lib/graph';\nimport fs from 'fs';\nimport path from 'path';\nexport let g = new Graph();\nexport let locations = [];\nexport let passengers = [];\nexport let vehicles = [];\n\n\nexport const loadVehicles = () => {\n\t// Initialize all Vehicles and add to the Vehicle HashMap\n\tfor (let i = 0; i < 6; i++) {\n\t\tswitch (i) {\n\t\t\t// Aircraft, Bart, Bicycle, Bus, Car, Taxi\n\t\t\tcase 0:\n\t\t\t\tvehicles[\"Aircraft\"] = new Vehicle('Aircraft', 575, 120, 400, 1);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tvehicles[\"Bart\"] = new Vehicle(\"Bart\", 60, 10, 8, 1);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvehicles[\"Bicycle\"] = new Vehicle(\"Bicycle\", 10, 0, 0, 1);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvehicles[\"Bus\"] = new Vehicle(\"Bus\", 30, 10, 0.5, 1);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvehicles[\"Car\"] = new Vehicle(\"Car\", 50, 0, 3, 3);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tvehicles[\"Taxi\"] = new Vehicle(\"Taxi\", 50, 10, 1.5, 2);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn vehicles;\n}\n\nexport const loadLocations = () => {\n\tconst locationsTxt = fs.readFileSync(path.join(__dirname, '../src/settings/Locations.txt'), 'utf8');\n\tconst lines = locationsTxt.split('\\n').slice(1);\n\t\n\treturn lines.map((line) => {\n\t\tlet i;\n\n\t\t// Split each line into its respective parameters\n\t\tvar payload = line.split(\",\");\n\n\t\t// // Split vehicle types and parse them based on their values\n\t\tvar types = payload[5].split(\"|\");\n\t\tvar vehicleTypes = new Array(types.length);\n\t\tfor (i = 0; i < types.length; i++)\n\t\t\tvehicleTypes[i] = types[i] === \"1\";\n\n\n\t\tvar vehiclePayload = [];\n\n\t\t// Initialize all Vehicles at that location\n\t\tfor (i = 0; i < vehicleTypes.length; i++) {\n\t\t\tif (vehicleTypes[i]) \n\t\t\t\tvehiclePayload.push(vehicles[Vehicle.vehicleNames[i]]);\n\t\t\telse\n\t\t\t\tvehiclePayload.push(null);\n\t\t}\n\n\t\t// Create a new Location object and add it to the list\n\t\tlet loc = new Location(payload[0], payload[1], payload[2], payload[3], payload[4], vehicleTypes, vehiclePayload);\n\t\tlocations.push(loc);\n\t\tg.addVertex(loc);\n\t\treturn loc;\n\t});\n}\n\nexport const loadPassengers = () => {\n\tconst passengersTxt = fs.readFileSync(path.join(__dirname, '../src/settings/People.txt'), 'utf8');\n\tconst lines = passengersTxt.split('\\n').slice(1);   // name,currentLocation,destination,preference,vehiclePreference\n\treturn lines.map((line) => {\n\t\tlet payload = line.split(\",\");\n\t\tlet passenger = new Passenger(payload[0].trim(), g.graph[payload[1]], g.graph[payload[2]], parseInt(payload[3]), payload[4].trim());\n\t\tpassengers.push(passenger);\n\t\treturn passenger;\n\t})\n}\n\nexport const loadPaths = () => {\n\tconst pathsTxt = fs.readFileSync(path.join(__dirname, '../src/settings/Paths.txt'), 'utf8');\n\tconst lines = pathsTxt.trim().split(/\\s*[\\r\\n]+\\s*/g).slice(1);    // startPoint,destPoint\n\treturn lines.map((line) => {\n\t\tlet payload = line.split(\",\");\n\t\tlet from = g.graph[payload[0]];\n\t\tlet to = g.graph[payload[1]];\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tif (from.vehicleTypes[i] && to.vehicleTypes[i])\n\t\t\t\tg.addEdge(from, to, getDistance(from,to), from.vehicles[i]);\n\t\t}\n\t\treturn [from,to];\n\t})\n}","// Here is the starting point for your application code.\n\n// Small helpers you might want to keep\nimport './helpers/context_menu.js';\nimport './helpers/external_links.js';\n\n// All stuff below is just to show you how it works. You can delete all of it.\n\nimport { loadPassengers, loadVehicles, loadLocations, loadPaths } from './settings/settings';\nimport { locations, g, passengers } from './settings/settings';\nimport { getShortestPathTo } from './lib/graph';\nimport p5 from 'p5';\n\n//const p5 = require('../app/libraries/p5.min');\n// var newNode = document.createElement(\"div\");\n// document.body.appendChild(newNode);\nlet root = document.querySelector('#root');\n\nconst sketch = (p) => {\n  let gray = 0;\n  let bg;\n\n  p.setup = () => {\n    let canvas = p.createCanvas(1700,900);\n    bg = p.loadImage(\"../Main/Map.png\");\n    console.log(loadVehicles());\n    console.log(loadLocations());\n    console.log(loadPaths());\n    console.log(loadPassengers());\n    g.computePaths(passengers[0]);\n    console.log(getShortestPathTo(passengers[0].dest));\n    canvas.parent('root')\n  }\n\n  p.draw = () => {\n    p.image(bg, 0, 0);\n\n    // Map all locations\n    locations.forEach((loc) => {\n        p.fill(255, 0, 0);\n        p.ellipse(loc.x, loc.y, 20,20);\n\n        // San Ramon and Dublin are not on the Google Maps image\n        if (loc.name == (\"San Ramon\") || loc.name == (\"Dublin\")) {\n            p.fill(0);\n            p.textSize(13);\n            p.text(loc.name, loc.x - 30, loc.y - 20);\n        }\n\n        // For each adjacent location, draw a line between them\n        loc.vehicles.forEach((vehicle) => {\n            if (vehicle != null) {\n                loc.adjacent[vehicle.name].forEach((e) => {\n                    p.line(loc.x, loc.y, e.to.x, e.to.y);\n                });\n            }\n        })\n    });\n\t//p.background(gray)\n\t//p.rect(p.width/2 - 25, p.height/2 - 25, 50, 50)\n\t//p.text(g.graph, 10, 30);\n  }\n\n  p.mousePressed = (e) => {\n\tconsole.log(`(${e.x}, ${e.y})`);\n  }\n}\n\n// See https://github.com/processing/p5.js/wiki/Instantiation-Cases\nnew p5(sketch, window.document.getElementById('root'));  // 2nd param can be a canvas html element"],"names":["Menu","remote","MenuItem","isAnyTextSelected","window","getSelection","toString","cut","execCommand","copy","paste","normalMenu","append","textEditingMenu","document","addEventListener","event","target","nodeName","preventDefault","popup","getCurrentWindow","supportExternalLinks","href","isExternal","checkDomElement","element","getAttribute","classList","contains","openExternal","parentElement","Vehicle","name","speedOfTravel","waitTime","unitCost","typeOfCost","location","undefined","vehicleNames","Graph","graph","node","from","to","weight","type","containsLocation","addVertex","addNeighbor","p","source","currentLoc","vals","Object","keys","map","key","forEach","x","dist","Infinity","prev","vertexQueue","TinyQueue","push","peek","u","pop","pref","vehiclePreference","adj","adjacent","e","v","alt","tempList","toRemove","item","getShortestPathTo","path","vertex","reverse","length","Edge","vehicleType","require","Location","latitude","longitude","y","vehicleTypes","vehicles","neighbor","vehicle","includes","lat","lon","payload","getDistance","loc1","loc2","Math","sqrt","pow","Passenger","dest","preference","g","locations","passengers","loadVehicles","i","loadLocations","locationsTxt","fs","readFileSync","join","__dirname","lines","split","slice","line","types","Array","vehiclePayload","loc","loadPassengers","passengersTxt","passenger","trim","parseInt","loadPaths","pathsTxt","addEdge","root","querySelector","sketch","gray","bg","setup","canvas","createCanvas","loadImage","log","computePaths","parent","draw","image","fill","ellipse","textSize","text","mousePressed","p5","getElementById"],"mappings":";;;;;;;;;;AAAA;;;AAGA,AAEA,IAAMA,OAAOC,gBAAOD,IAApB;AACA,IAAME,WAAWD,gBAAOC,QAAxB;;AAEA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAM;SACvBC,OAAOC,YAAP,GAAsBC,QAAtB,OAAqC,EAA5C;CADF;;AAIA,IAAMC,MAAM,IAAIL,QAAJ,CAAa;SAChB,KADgB;SAEhB,iBAAM;aACFM,WAAT,CAAqB,KAArB;;CAHQ,CAAZ;;AAOA,IAAMC,OAAO,IAAIP,QAAJ,CAAa;SACjB,MADiB;SAEjB,iBAAM;aACFM,WAAT,CAAqB,MAArB;;CAHS,CAAb;;AAOA,IAAME,QAAQ,IAAIR,QAAJ,CAAa;SAClB,OADkB;SAElB,iBAAM;aACFM,WAAT,CAAqB,OAArB;;CAHU,CAAd;;AAOA,IAAMG,aAAa,IAAIX,IAAJ,EAAnB;AACAW,WAAWC,MAAX,CAAkBH,IAAlB;;AAEA,IAAMI,kBAAkB,IAAIb,IAAJ,EAAxB;AACAa,gBAAgBD,MAAhB,CAAuBL,GAAvB;AACAM,gBAAgBD,MAAhB,CAAuBH,IAAvB;AACAI,gBAAgBD,MAAhB,CAAuBF,KAAvB;;AAEAI,SAASC,gBAAT,CAA0B,aAA1B,EAAyC,UAACC,KAAD,EAAW;UAC1CA,MAAMC,MAAN,CAAaC,QAArB;SACO,UAAL;SACK,OAAL;YACQC,cAAN;sBACgBC,KAAhB,CAAsBnB,gBAAOoB,gBAAP,EAAtB;;;UAGIlB,mBAAJ,EAAyB;cACjBgB,cAAN;mBACWC,KAAX,CAAiBnB,gBAAOoB,gBAAP,EAAjB;;;CAVR,EAaG,KAbH;;ACzCA;;;;;;;;;;;;;;;AAeA,AAEA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACN,KAAD,EAAW;MAClCO,aAAJ;MACIC,aAAa,KAAjB;;MAEMC,kBAAkB,SAAlBA,eAAkB,CAACC,OAAD,EAAa;QAC/BA,QAAQR,QAAR,KAAqB,GAAzB,EAA8B;aACrBQ,QAAQC,YAAR,CAAqB,MAArB,CAAP;;QAEED,QAAQE,SAAR,CAAkBC,QAAlB,CAA2B,kBAA3B,CAAJ,EAAoD;mBACrC,IAAb;;QAEEN,QAAQC,UAAZ,EAAwB;qBAChBM,YAAN,CAAmBP,IAAnB;YACMJ,cAAN;KAFF,MAGO,IAAIO,QAAQK,aAAZ,EAA2B;sBAChBL,QAAQK,aAAxB;;GAXJ;;kBAegBf,MAAMC,MAAtB;CAnBF;;AAsBAH,SAASC,gBAAT,CAA0B,OAA1B,EAAmCO,oBAAnC,EAAyD,KAAzD;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;;;;IAIqBU,UAGjB,iBAAYC,IAAZ,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqDC,UAArD,EAAiE;;;;;SAiBjE/B,QAjBiE,GAiBtD,YAAM;eACN,MAAK2B,IAAZ;KAlB6D;;SACxDA,IAAL,GAAYA,IAAZ;SACKC,aAAL,GAAqBA,aAArB;SACKC,QAAL,GAAgBA,QAAhB;SACKC,QAAL,GAAgBA,QAAhB;SACKC,UAAL,GAAkBA,UAAlB;SACKC,QAAL,GAAgBC,SAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATaP,QACVQ,eAAe,CAAC,UAAD,EAAa,MAAb,EAAqB,SAArB,EAAgC,KAAhC,EAAuC,KAAvC,EAA8C,MAA9C;;ACL1B;;;;AAIA,AACA;;IAEqBC;kBACN;;;OACRC,KAAL,GAAa,EAAb;;;;;4BAGSC,MAAK;QACTD,KAAL,CAAWC,KAAKV,IAAhB,IAAwBU,IAAxB;;;;mCAGgBA,MAAM;UACf,KAAKD,KAAL,CAAWC,KAAKV,IAAhB,KAAyBM,SAAhC;;;;0BAGOK,MAAMC,IAAIC,QAAQC,MAAM;OAC3B,CAAC,KAAKC,gBAAL,CAAsBJ,IAAtB,CAAL,EACC,KAAKK,SAAL,CAAeL,IAAf;;OAEG,CAAC,KAAKI,gBAAL,CAAsBH,EAAtB,CAAL,EACC,KAAKI,SAAL,CAAeJ,EAAf;;QAEIK,WAAL,CAAiBL,EAAjB,EAAqBC,MAArB,EAA6BC,IAA7B;MACGG,WAAH,CAAeN,IAAf,EAAqBE,MAArB,EAA6BC,IAA7B;;;;;;;;+BAKYI,GAAG;;;OAEXC,SAASD,EAAEE,UAAf;;;OAGIC,OAAOC,OAAOC,IAAP,CAAY,KAAKd,KAAjB,EAAwBe,GAAxB,CAA4B,UAACC,GAAD,EAAQ;WACvC,MAAKhB,KAAL,CAAWgB,GAAX,CAAP;IADU,CAAX;;QAIKC,OAAL,CAAa,UAACC,CAAD,EAAM;MAChBC,IAAF,GAASC,QAAT;MACEC,IAAF,GAAS,IAAT;IAFD;;UAKOF,IAAP,GAAc,CAAd;OACIG,cAAc,IAAIC,SAAJ,EAAlB;eACYC,IAAZ,CAAiBd,MAAjB;;UAEOY,YAAYG,IAAZ,EAAP,EAA2B;;;QAGtBC,IAAIJ,YAAYK,GAAZ,EAAR;;;QAGIC,OAAOnB,EAAEoB,iBAAb;QACIC,MAAMJ,EAAEK,QAAZ;QACIH,IAAJ,EAAUX,OAAV,CAAkB,UAACe,CAAD,EAAO;SACpBC,IAAID,EAAE7B,EAAV,CADwB;SAEpB+B,MAAMR,EAAEP,IAAF,GAASa,EAAE5B,MAArB,CAFwB;SAGpB8B,MAAMD,EAAEd,IAAZ,EAAkB;;;UAGbgB,WAAW,EAAf;UACIC,WAAWd,YAAYK,GAAZ,EAAf;eACSH,IAAT,CAAcY,QAAd;aACMA,YAAYH,CAAZ,IAAiBX,YAAYG,IAAZ,EAAvB,EAA0C;kBAC9BH,YAAYK,GAAZ,EAAX;;WAEIS,YAAYH,CAAhB,EACCE,SAASX,IAAT,CAAcY,QAAd;;;;eAIOnB,OAAT,CAAiB,UAACoB,IAAD,EAAU;mBACdb,IAAZ,CAAiBa,IAAjB;OADD;;QAIElB,IAAF,GAASe,GAAT;QACEb,IAAF,GAASK,CAAT;kBACYF,IAAZ,CAAiBS,CAAjB;;KAvBF;;;;;;;;;AA8BH,AAAO,IAAMK,oBAAoB,SAApBA,iBAAoB,CAAC/D,MAAD,EAAY;KACxCgE,UAAO,EAAX;MACK,IAAIC,SAASjE,MAAlB,EAA0BiE,UAAU,IAApC,EAA0CA,SAASA,OAAOnB,IAA1D;UACKG,IAAL,CAAUgB,MAAV;EAEAD,QAAKE,OAAL;;;KAGIF,QAAKG,MAAL,IAAe,CAAnB,EACCH,QAAKf,IAAL,CAAUe,QAAK,CAAL,CAAV;;QAEMA,OAAP;CAXM;;ACzFP;;;;IAIqBI,OACjB,cAAYzC,IAAZ,EAAkBC,EAAlB,EAAsBC,MAAtB,EAA8BwC,WAA9B,EAA2C;;;SAClC1C,IAAL,GAAYA,IAAZ;SACKC,EAAL,GAAUA,EAAV;SACKC,MAAL,GAAcA,MAAd;SACKwC,WAAL,GAAmBA,WAAnB;;;ACTR,IAAML,SAAOM,QAAQ,MAAR,CAAb;;AAEA,IAIqBC,WACjB,kBAAYvD,IAAZ,EAAkBwD,QAAlB,EAA4BC,SAA5B,EAAuC9B,CAAvC,EAA0C+B,CAA1C,EAA6CC,YAA7C,EAA2DC,QAA3D,EAAqE;;;;;SAkBrE3C,WAlBqE,GAkBvD,UAAC4C,QAAD,EAAWhD,MAAX,EAAmBiD,OAAnB,EAA+B;YACrCrB,IAAI,IAAIW,IAAJ,QAAeS,QAAf,EAAyBhD,MAAzB,EAAiCiD,OAAjC,CAAR;YACI,MAAKtB,QAAL,CAAcsB,QAAQ9D,IAAtB,KAA+BM,SAA/B,IAA4C,CAAC,MAAKkC,QAAL,CAAcsB,QAAQ9D,IAAtB,EAA4B+D,QAA5B,CAAqCtB,CAArC,CAAjD,EAA0F;kBACjFD,QAAL,CAAcsB,QAAQ9D,IAAtB,EAA4BiC,IAA5B,CAAiCQ,CAAjC;;KArB6D;;SAC5DzC,IAAL,GAAYA,IAAZ;SACD2B,CAAL,GAASA,CAAT;SACK+B,CAAL,GAASA,CAAT;SACKC,YAAL,GAAoBA,YAApB;SACKC,QAAL,GAAgBA,QAAhB;SACKI,GAAL,GAAWR,QAAX;SACKS,GAAL,GAAWR,SAAX;;;SAGKjB,QAAL,GAAgB,EAAhB;aACed,OAAT,CAAiB,UAACwC,OAAD,EAAa;YACtBA,OAAJ,EAAa;kBACJ1B,QAAL,CAAc0B,QAAQlE,IAAtB,IAA8B,EAA9B;;KAFR;;;AAeR,AAmDO,IAAMmE,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,IAAP,EAAgB;WAChCC,KAAKC,IAAL,CAAUD,KAAKE,GAAL,CAASH,KAAK1C,CAAL,GAASyC,KAAKzC,CAAvB,EAA0B,CAA1B,IAA+B2C,KAAKE,GAAL,CAASH,KAAKX,CAAL,GAASU,KAAKV,CAAvB,EAA0B,CAA1B,CAAzC,CAAP;CADG;;AAIP;;;;;;;;;;;;;;;;;;;ACxFA,IAAMV,SAAOM,QAAQ,MAAR,CAAb;;IAEqBmB,YACjB,mBAAYzE,IAAZ,EAAkBoB,UAAlB,EAA8BsD,IAA9B,EAAoCC,UAApC,EAAgDrC,iBAAhD,EAAmE;;;SAC1DtC,IAAL,GAAYA,IAAZ;SACKoB,UAAL,GAAkBA,UAAlB;SACKsD,IAAL,GAAYA,IAAZ;SACKC,UAAL,GAAkBA,UAAlB,CAJ+D;SAK1DrC,iBAAL,GAAyBA,iBAAzB;;;ACLR;AACA,AAGO,IAAIsC,IAAI,IAAIpE,KAAJ,EAAR;AACP,AAAO,IAAIqE,YAAY,EAAhB;AACP,AAAO,IAAIC,aAAa,EAAjB;AACP,AAAO,IAAIlB,WAAW,EAAf;;AAGP,AAAO,IAAMmB,eAAe,SAAfA,YAAe,GAAM;;MAE5B,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;UACnBA,CAAR;;QAEM,CAAL;aACU,UAAT,IAAuB,IAAIjF,OAAJ,CAAY,UAAZ,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,CAAvC,CAAvB;;QAEI,CAAL;aACU,MAAT,IAAmB,IAAIA,OAAJ,CAAY,MAAZ,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,EAA+B,CAA/B,CAAnB;;QAEI,CAAL;aACU,SAAT,IAAsB,IAAIA,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,CAAtB;;QAEI,CAAL;aACU,KAAT,IAAkB,IAAIA,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,GAA3B,EAAgC,CAAhC,CAAlB;;QAEI,CAAL;aACU,KAAT,IAAkB,IAAIA,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAlB;;QAEI,CAAL;aACU,MAAT,IAAmB,IAAIA,OAAJ,CAAY,MAAZ,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,GAA5B,EAAiC,CAAjC,CAAnB;;;;;QAKI6D,QAAP;CA1BM;;AA6BP,AAAO,IAAMqB,gBAAgB,SAAhBA,aAAgB,GAAM;KAC5BC,eAAeC,GAAGC,YAAH,CAAgBpC,KAAKqC,IAAL,CAAUC,SAAV,EAAqB,+BAArB,CAAhB,EAAuE,MAAvE,CAArB;KACMC,QAAQL,aAAaM,KAAb,CAAmB,IAAnB,EAAyBC,KAAzB,CAA+B,CAA/B,CAAd;;QAEOF,MAAM/D,GAAN,CAAU,UAACkE,IAAD,EAAU;MACtBV,UAAJ;;;MAGId,UAAUwB,KAAKF,KAAL,CAAW,GAAX,CAAd;;;MAGIG,QAAQzB,QAAQ,CAAR,EAAWsB,KAAX,CAAiB,GAAjB,CAAZ;MACI7B,eAAe,IAAIiC,KAAJ,CAAUD,MAAMxC,MAAhB,CAAnB;OACK6B,IAAI,CAAT,EAAYA,IAAIW,MAAMxC,MAAtB,EAA8B6B,GAA9B;gBACcA,CAAb,IAAkBW,MAAMX,CAAN,MAAa,GAA/B;GAGD,IAAIa,iBAAiB,EAArB;;;OAGKb,IAAI,CAAT,EAAYA,IAAIrB,aAAaR,MAA7B,EAAqC6B,GAArC,EAA0C;OACrCrB,aAAaqB,CAAb,CAAJ,EACCa,eAAe5D,IAAf,CAAoB2B,SAAS7D,QAAQQ,YAAR,CAAqByE,CAArB,CAAT,CAApB,EADD,KAGCa,eAAe5D,IAAf,CAAoB,IAApB;;;;MAIE6D,MAAM,IAAIvC,QAAJ,CAAaW,QAAQ,CAAR,CAAb,EAAyBA,QAAQ,CAAR,CAAzB,EAAqCA,QAAQ,CAAR,CAArC,EAAiDA,QAAQ,CAAR,CAAjD,EAA6DA,QAAQ,CAAR,CAA7D,EAAyEP,YAAzE,EAAuFkC,cAAvF,CAAV;YACU5D,IAAV,CAAe6D,GAAf;IACE9E,SAAF,CAAY8E,GAAZ;SACOA,GAAP;EA3BM,CAAP;CAJM;;AAmCP,AAAO,IAAMC,iBAAiB,SAAjBA,cAAiB,GAAM;KAC7BC,gBAAgBb,GAAGC,YAAH,CAAgBpC,KAAKqC,IAAL,CAAUC,SAAV,EAAqB,4BAArB,CAAhB,EAAoE,MAApE,CAAtB;KACMC,QAAQS,cAAcR,KAAd,CAAoB,IAApB,EAA0BC,KAA1B,CAAgC,CAAhC,CAAd,CAFmC;QAG5BF,MAAM/D,GAAN,CAAU,UAACkE,IAAD,EAAU;MACtBxB,UAAUwB,KAAKF,KAAL,CAAW,GAAX,CAAd;MACIS,YAAY,IAAIxB,SAAJ,CAAcP,QAAQ,CAAR,EAAWgC,IAAX,EAAd,EAAiCtB,EAAEnE,KAAF,CAAQyD,QAAQ,CAAR,CAAR,CAAjC,EAAsDU,EAAEnE,KAAF,CAAQyD,QAAQ,CAAR,CAAR,CAAtD,EAA2EiC,SAASjC,QAAQ,CAAR,CAAT,CAA3E,EAAiGA,QAAQ,CAAR,EAAWgC,IAAX,EAAjG,CAAhB;aACWjE,IAAX,CAAgBgE,SAAhB;SACOA,SAAP;EAJM,CAAP;CAHM;;AAWP,AAAO,IAAMG,YAAY,SAAZA,SAAY,GAAM;KACxBC,WAAWlB,GAAGC,YAAH,CAAgBpC,KAAKqC,IAAL,CAAUC,SAAV,EAAqB,2BAArB,CAAhB,EAAmE,MAAnE,CAAjB;KACMC,QAAQc,SAASH,IAAT,GAAgBV,KAAhB,CAAsB,gBAAtB,EAAwCC,KAAxC,CAA8C,CAA9C,CAAd,CAF8B;QAGvBF,MAAM/D,GAAN,CAAU,UAACkE,IAAD,EAAU;MACtBxB,UAAUwB,KAAKF,KAAL,CAAW,GAAX,CAAd;MACI7E,OAAOiE,EAAEnE,KAAF,CAAQyD,QAAQ,CAAR,CAAR,CAAX;MACItD,KAAKgE,EAAEnE,KAAF,CAAQyD,QAAQ,CAAR,CAAR,CAAT;OACK,IAAIc,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;OACvBrE,KAAKgD,YAAL,CAAkBqB,CAAlB,KAAwBpE,GAAG+C,YAAH,CAAgBqB,CAAhB,CAA5B,EACCJ,EAAE0B,OAAF,CAAU3F,IAAV,EAAgBC,EAAhB,EAAoBuD,YAAYxD,IAAZ,EAAiBC,EAAjB,CAApB,EAA0CD,KAAKiD,QAAL,CAAcoB,CAAd,CAA1C;;SAEK,CAACrE,IAAD,EAAMC,EAAN,CAAP;EARM,CAAP;CAHM;;ACxFP;;;AAGA,AAGA;;AAEA,AAKA;;;AAGA,IAAI2F,OAAO1H,SAAS2H,aAAT,CAAuB,OAAvB,CAAX;;AAEA,IAAMC,SAAS,SAATA,MAAS,CAACvF,CAAD,EAAO;QAChBwF,OAAO,CAAX;QACIC,WAAJ;;MAEEC,KAAF,GAAU,YAAM;YACVC,SAAS3F,EAAE4F,YAAF,CAAe,IAAf,EAAoB,GAApB,CAAb;aACK5F,EAAE6F,SAAF,CAAY,iBAAZ,CAAL;gBACQC,GAAR,CAAYjC,cAAZ;gBACQiC,GAAR,CAAY/B,eAAZ;gBACQ+B,GAAR,CAAYZ,WAAZ;gBACQY,GAAR,CAAYjB,gBAAZ;UACEkB,YAAF,CAAenC,WAAW,CAAX,CAAf;gBACQkC,GAAR,CAAYjE,kBAAkB+B,WAAW,CAAX,EAAcJ,IAAhC,CAAZ;eACOwC,MAAP,CAAc,MAAd;KATF;;MAYEC,IAAF,GAAS,YAAM;UACXC,KAAF,CAAQT,EAAR,EAAY,CAAZ,EAAe,CAAf;;;kBAGUjF,OAAV,CAAkB,UAACoE,GAAD,EAAS;cACrBuB,IAAF,CAAO,GAAP,EAAY,CAAZ,EAAe,CAAf;cACEC,OAAF,CAAUxB,IAAInE,CAAd,EAAiBmE,IAAIpC,CAArB,EAAwB,EAAxB,EAA2B,EAA3B;;;gBAGIoC,IAAI9F,IAAJ,IAAa,WAAb,IAA6B8F,IAAI9F,IAAJ,IAAa,QAA9C,EAAyD;kBACnDqH,IAAF,CAAO,CAAP;kBACEE,QAAF,CAAW,EAAX;kBACEC,IAAF,CAAO1B,IAAI9F,IAAX,EAAiB8F,IAAInE,CAAJ,GAAQ,EAAzB,EAA6BmE,IAAIpC,CAAJ,GAAQ,EAArC;;;;gBAIAE,QAAJ,CAAalC,OAAb,CAAqB,UAACoC,OAAD,EAAa;oBAC1BA,WAAW,IAAf,EAAqB;wBACbtB,QAAJ,CAAasB,QAAQ9D,IAArB,EAA2B0B,OAA3B,CAAmC,UAACe,CAAD,EAAO;0BACpCiD,IAAF,CAAOI,IAAInE,CAAX,EAAcmE,IAAIpC,CAAlB,EAAqBjB,EAAE7B,EAAF,CAAKe,CAA1B,EAA6Bc,EAAE7B,EAAF,CAAK8C,CAAlC;qBADJ;;aAFR;SAZJ;;;;KAJF;;MA6BE+D,YAAF,GAAiB,UAAChF,CAAD,EAAO;gBACjBuE,GAAR,OAAgBvE,EAAEd,CAAlB,UAAwBc,EAAEiB,CAA1B;KADC;CA7CF;;;AAmDA,IAAIgE,EAAJ,CAAOjB,MAAP,EAAetI,OAAOU,QAAP,CAAgB8I,cAAhB,CAA+B,MAA/B,CAAf"}