{"version":3,"file":"app.js","sources":["src/helpers/context_menu.js","src/helpers/external_links.js","src/lib/vehicle.js","src/lib/graph.js","src/lib/edge.js","src/lib/location.js","src/lib/passenger.js","src/settings/settings.js","src/app.js"],"sourcesContent":["// This gives you default context menu (cut, copy, paste)\n// in all input fields and textareas across your app.\n\nimport { remote } from 'electron';\n\nconst Menu = remote.Menu;\nconst MenuItem = remote.MenuItem;\n\nconst isAnyTextSelected = () => {\n  return window.getSelection().toString() !== '';\n};\n\nconst cut = new MenuItem({\n  label: 'Cut',\n  click: () => {\n    document.execCommand('cut');\n  },\n});\n\nconst copy = new MenuItem({\n  label: 'Copy',\n  click: () => {\n    document.execCommand('copy');\n  },\n});\n\nconst paste = new MenuItem({\n  label: 'Paste',\n  click: () => {\n    document.execCommand('paste');\n  },\n});\n\nconst normalMenu = new Menu();\nnormalMenu.append(copy);\n\nconst textEditingMenu = new Menu();\ntextEditingMenu.append(cut);\ntextEditingMenu.append(copy);\ntextEditingMenu.append(paste);\n\ndocument.addEventListener('contextmenu', (event) => {\n  switch (event.target.nodeName) {\n    case 'TEXTAREA':\n    case 'INPUT':\n      event.preventDefault();\n      textEditingMenu.popup(remote.getCurrentWindow());\n      break;\n    default:\n      if (isAnyTextSelected()) {\n        event.preventDefault();\n        normalMenu.popup(remote.getCurrentWindow());\n      }\n  }\n}, false);\n","// Convenient way for opening links in external browser, not in the app.\n// Useful especially if you have a lot of links to deal with.\n//\n// Usage:\n//\n// Every link with class \".js-external-link\" will be opened in external browser.\n// <a class=\"js-external-link\" href=\"http://google.com\">google</a>\n//\n// The same behaviour for many links can be achieved by adding\n// this class to any parent tag of an anchor tag.\n// <p class=\"js-external-link\">\n//    <a href=\"http://google.com\">google</a>\n//    <a href=\"http://bing.com\">bing</a>\n// </p>\n\nimport { shell } from 'electron';\n\nconst supportExternalLinks = (event) => {\n  let href;\n  let isExternal = false;\n\n  const checkDomElement = (element) => {\n    if (element.nodeName === 'A') {\n      href = element.getAttribute('href');\n    }\n    if (element.classList.contains('js-external-link')) {\n      isExternal = true;\n    }\n    if (href && isExternal) {\n      shell.openExternal(href);\n      event.preventDefault();\n    } else if (element.parentElement) {\n      checkDomElement(element.parentElement);\n    }\n  };\n\n  checkDomElement(event.target);\n};\n\ndocument.addEventListener('click', supportExternalLinks, false);\n","/**\n * Created by ashwin on 2/25/17.\n */\n\nexport default class Vehicle {\n    static vehicleNames = [\"Aircraft\", \"Bart\", \"Bicycle\", \"Bus\", \"Car\", \"Taxi\"];\n\n    constructor(name, speedOfTravel, waitTime, unitCost, typeOfCost) {\n        this.name = name;\n        this.speedOfTravel = speedOfTravel;\n        this.waitTime = waitTime;\n        this.unitCost = unitCost;\n        this.typeOfCost = typeOfCost;\n        this.location = undefined;\n    }\n\n    toString = () => {\n        return this.name;\n    };\n\n    calculateCostOfTravel(distance){\n\t\t// typeOfCost: 1 is fixed (regardless of time or distance), 2 is fixed + a factor of distance  (e.g. a Taxi cab),\n\t\t// and 3 is based on fraction of distance (e.g. a Car where unitCost is expressed as cost/gallon)\n\n\t\tswitch (this.typeOfCost){\n\t\t\tcase 1:\n\t\t\t\treturn this.unitCost; // Fixed Cost\n\n\t\t\tcase 2:\n\t\t\t\treturn this.unitCost + (distance * 2); // Fixed Cost + $2 per mile\n\n\t\t\tcase 3:\n\t\t\t\treturn (this.unitCost / 25) * distance; // Cost per gallon per mile. $3 a gallon and 25 mpg\n\n\t\t\tdefault:\n\t\t\t\treturn 0.0;\n\t\t}\n\t}\n\n}","/**\n * Created by ashwi on 2/13/2017.\n */\n\nimport TinyQueue from 'tinyqueue'\n//const TinyQueue = require('tinyqueue');\nimport { vehicles } from '../settings/settings'\n\nexport default class Graph{\n\tconstructor() {\n\t\tthis.graph = {};\n\t}\n\n\taddVertex(node){\n\t\tthis.graph[node.name] = node;\n\t};\n\n\tcontainsLocation(node) {\n\t\treturn this.graph[node.name] != undefined;\n\t};\n\n\taddEdge(from, to, weight, type) {\n\t\tif (!this.containsLocation(from))\n\t\t\tthis.addVertex(from);\n\n\t\tif (!this.containsLocation(to))\n\t\t\tthis.addVertex(to);\n\n\t\tfrom.addNeighbor(to, weight, type);\n\t\tto.addNeighbor(from, weight, type);\n\t};\n\n\t// Implementation of Dijkstra's algorithm\n\t// Computes paths for each Passenger p\n\tcomputePaths(p) {\n\n\t\tvar source = p.currentLoc;\n\n\t\t// Must reset every location distance and previous values upon each function call\n\t\tObject.values(this.graph).forEach((x) => {\n\t\t\tx.dist = Infinity;\n\t\t\tx.prev = null;\n\t\t});\n\t\t\n\n\t\tsource.dist = 0;\n\t\tvar vertexQueue = new TinyQueue([], (a,b) => {\n\t\t\treturn a && b ? (a.dist < b.dist ? -1 : a.dist > b.dist ? 1: 0): 0;\n\t\t});\n\t\tvertexQueue.push(source);\n\n\t\twhile (vertexQueue.peek()) {\n\n\t\t\t// Pop the Location with the least distance\n\t\t\tlet u = vertexQueue.pop();\n\n\t\t\t// Visit each edge exiting u with the specified vehicle preference\n\t\t\tlet pref = p.vehiclePreference;\n\t\t\tlet adj = u.adjacent;\n\t\t\tadj.get(vehicles.get(p.vehiclePreference)).forEach((e) => {\n\t\t\t\tlet v = e.to;\t// Location v\n\t\t\t\tlet alt = u.dist + e.weight;\t// Calculate alternative cost (double)\n\t\t\t\tif (alt < v.dist) {\n\t\t\t\t\t// Remove v from priority queue\n\t\t\t\t\tvertexQueue.data.filter((loc) => loc == v);\n\n\t\t\t\t\tv.dist = alt;\n\t\t\t\t\tv.prev = u;\n\t\t\t\t\tvertexQueue.push(v);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport const getShortestPathTo = (target) => {\n\tvar path = [];\n\tfor (var vertex = target; vertex != null; vertex = vertex.prev)\n\tpath.push(vertex);\n\n\tpath.reverse();\n\n\t// If no possible path, path will be [currentLoc, currentLoc]\n\tif (path.length == 1)\n\t\tpath.push(path[0]);\n\n\treturn path;\n};","/**\n * Created by ashwin on 2/25/17.\n */\n\nexport default class Edge {\n    constructor(from, to, weight, vehicleType) {\n        this.from = from;\n        this.to = to;\n        this.weight = weight;\n        this.vehicleType = vehicleType;\n    }\n}\n\n// function Edge (from, to, weight, vehicleType) {\n\n//     this.from = from;\n//     this.to = to;\n//     this.weight = weight;\n//     this.vehicleType = vehicleType;\n// }\n\n// module.exports = {\n//     createPaths: () => {\n//         const Location = require('./location');\n//         //const Graph = require('./graph');\n//         const pathsTxt = fs.readFileSync(path.resolve(__dirname, '../settings/Paths.txt'), 'utf8');\n//         const lines = pathsTxt.trim().split(/\\s*[\\r\\n]+\\s*/g).slice(1);    // startPoint,destPoint\n//         return lines.map((line) => {\n//             var payload = line.split(\",\");\n\n//             var from = Graph.graph[payload[0]];\n//             var to = Graph.graph[payload[1]];\n//             for (var i = 0; i < 6; i++) {\n//                 if (from.vehicleTypes[i] && to.vehicleTypes[i])\n//                     Graph.addEdge(from, to, Location.getDistance(from,to), from.vehicles[i]);\n//             }\n\n//         })\n//     },\n//     createEdge: (from, to, weight, vehicleType) => {\n//         return new Edge(from, to, weight, vehicleType);\n//     }\n// };\n","const path = require('path');\n\nimport Vehicle from './vehicle';\nimport Graph from './graph';\nimport Edge from './edge';\n\nexport default class Location {\n    constructor(name, latitude, longitude, x, y, vehicleTypes, vehicles) {\n        this.name = name;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.vehicleTypes = vehicleTypes;\n\t\tthis.vehicles = vehicles;\n\t\tthis.lat = latitude;\n\t\tthis.lon = longitude;\n        this.dist = Infinity;\n\n\t\t// Initialize Adjacency HashMap and map each vehicle to an ArrayList of Edges\n\t\tthis.adjacent = new Map();\n        vehicles.forEach((vehicle) => {\n            if (vehicle) {\n                this.adjacent.set(vehicle, []);\n            }\n        });\n    }\n\n    addNeighbor = (neighbor, weight, vehicle) => {\n        // var e = new Edge(this, neighbor, weight, vehicle);\n        // if (this.adjacent[vehicle.name] != undefined && !this.adjacent[vehicle.name].includes(e)) {\n        //     this.adjacent[vehicle.name].push(e);\n        // }\n\n        let e = new Edge(this, neighbor, weight , vehicle);\n\t\tif (!this.adjacent.get(vehicle).includes(e))\n\t\t\tthis.adjacent.get(vehicle).push(e);\n    };\n}\n\n// function Location(line) {\n    // let i;\n\n    // // Split each line into its respective parameters\n    // var payload = line.split(\",\");\n\n    // // // Split vehicle types and parse them based on their values\n    // var types = payload[5].split(\"|\");\n    // var vehicleTypes = new Array(types.length);\n    // for (i = 0; i < types.length; i++)\n    //     vehicleTypes[i] = types[i] === \"1\";\n\n\n    // var vehiclePayload = [];\n\n    // // Initialize all Vehicles at that location\n    // for (i = 0; i < vehicleTypes.length; i++) {\n    //     if (vehicleTypes[i]) {\n    //         let v = Vehicle.getVehicle(Vehicle.vehicleNames[i]);\n    //         vehiclePayload.push(v);\n    //     } else\n    //         vehiclePayload.push(null);\n    // }\n\n//     this.name = payload[0];\n//     this.x = parseFloat(payload[3]);\n//     this.y = parseFloat(payload[4]);\n//     this.vehicleTypes = vehicleTypes;\n//     this.vehicles = vehiclePayload;\n//     this.lat = parseInt(payload[1]);\n//     this.lon = parseInt(payload[2]);\n//     this.dist = Infinity;\n//     this.prev = null;\n\n//     // Initialize Adjacency HashMap and map each vehicle to an ArrayList of Edges\n\n//     this.adjacent = {};\n//     vehiclePayload.forEach((payload) => {\n//         if (payload) {\n//             this.adjacent[payload.name] = [];\n//         }\n//     })\n// }\n\n// Location.prototype.addNeighbor = function(neighbor, weight, vehicle) {\n//     var e = Edge.createEdge(this, neighbor, weight, vehicle);\n//     if (this.adjacent[vehicle.name] != undefined && !this.adjacent[vehicle.name].includes(e)) {\n//         this.adjacent[vehicle.name].push(e);\n//     }\n// };\n\nexport const getDistance = (loc1, loc2) => {\n    return Math.sqrt(Math.pow(loc2.x - loc1.x, 2) + Math.pow(loc2.y - loc1.y, 2));\n};\n\nexport const getHaversineDistance = (l1, l2) => {\n    var lat1 = l1.lat;\n    var lon1 = l1.lon;\n    var lat2 = l2.lat;\n    var lon2 = l2.lon;\n\n    var R = 6371; // meters\n\n    var φ1 = Math.PI / 180 * (lat1);\n    var φ2 = Math.PI / 180 * (lat2);\n    var Δφ = Math.PI / 180 * (lat2 - lat1);\n    var Δλ = Math.PI / 180 * (lon2 - lon1);\n\n    var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    var d = R * c;\n\n    return d * 0.621371;\n};\n\n// module.exports = {\n//     getLocations: () => {\n//         const locationsTxt = fs.readFileSync(path.resolve(__dirname, '../settings/Locations.txt'), 'utf8');\n//         const lines = locationsTxt.split('\\n').slice(1);\n//         return lines.map((line) => {\n//             let loc = new Location(line);\n//             // Create a new Location object and add it to the list\n//             console.log('Graph: ')\n//             console.log(Graph.locations);\n//             Graph.locations.push(loc);\n//             Graph.addVertex(loc);\n//             return loc;\n//         })\n//     },\n//     getDistance: getDistance\n// };","import { getHaversineDistance } from './location';\nimport { vehicles } from '../settings/settings';\n\nexport default class Passenger {\n    constructor(name, currentLoc, dest, preference, vehiclePreference) {\n        this.name = name;\n        this.currentLoc = currentLoc;\n        this.dest = dest;\n        this.preference = preference;   // 1 for shortest time, 2 for lowest cost\n        this.vehiclePreference = vehiclePreference;\n        this.path = [];\n        this.cost = 0;\n    }\n\n    setPath (path) {\n        this.path = path;\n    }\n\n    calculateCost(){\n\t\t// typeOfCost: 1 is fixed (regardless of time or distance), 2 is fixed + a factor of distance  (e.g. a Taxi cab),\n\t\t// and 3 is based on fraction of distance (e.g. a Car where unitCost is expressed as cost/gallon)\n\n\t\tlet distance = 0;\n\t\tfor (let i = 0; i < this.path.length -1;i++) distance += getHaversineDistance(this.path[i], this.path[i+1]);\n\n\t\tthis.cost = vehicles.get(this.vehiclePreference).calculateCostOfTravel(distance);\n\n\t\treturn this.cost;\n\n\t}\n}\n","import Vehicle from '../lib/vehicle';\nimport Location, { getDistance } from '../lib/location';\nimport Passenger from '../lib/passenger';\n// import Edge from '../lib/edge';\nimport Graph from '../lib/graph';\nimport fs from 'fs';\nimport path from 'path';\nexport let g = new Graph();\nexport let locations = [];\nexport let passengers = [];\nexport let vehicles = new Map();\n\n\nexport const loadVehicles = () => {\n\t// Initialize all Vehicles and add to the Vehicle HashMap\n\tfor (let i = 0; i < 6; i++) {\n\t\tswitch (i) {\n\t\t\t// Aircraft, Bart, Bicycle, Bus, Car, Taxi\n\t\t\tcase 0:\n\t\t\t\tvehicles.set(\"Aircraft\", new Vehicle('Aircraft', 575, 120, 400, 1));\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tvehicles.set(\"Bart\",new Vehicle(\"Bart\", 60, 10, 8, 1));\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvehicles.set(\"Bicycle\", new Vehicle(\"Bicycle\", 10, 0, 0, 1));\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvehicles.set(\"Bus\", new Vehicle(\"Bus\", 30, 10, 0.5, 1));\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvehicles.set(\"Car\", new Vehicle(\"Car\", 50, 0, 3, 3));\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tvehicles.set(\"Taxi\", new Vehicle(\"Taxi\", 50, 10, 1.5, 2));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn vehicles;\n}\n\nexport const loadLocations = () => {\n\tconst locationsTxt = fs.readFileSync(path.join(__dirname, '../src/settings/Locations.txt'), 'utf8');\n\tconst lines = locationsTxt.split('\\n').slice(1);\n\t\n\treturn lines.map((line) => {\n\t\tlet i;\n\n\t\t// Split each line into its respective parameters\n\t\tvar payload = line.split(\",\");\n\n\t\t// // Split vehicle types and parse them based on their values\n\t\tvar types = payload[5].split(\"|\");\n\t\tvar vehicleTypes = new Array(types.length);\n\t\tfor (i = 0; i < types.length; i++)\n\t\t\tvehicleTypes[i] = types[i] == 1;\n\n\n\t\tvar vehiclePayload = [];\n\n\t\t// Initialize all Vehicles at that location\n\t\tfor (i = 0; i < vehicleTypes.length; i++) {\n\t\t\tif (vehicleTypes[i]) \n\t\t\t\tvehiclePayload.push(vehicles.get(Vehicle.vehicleNames[i]));\n\t\t\telse\n\t\t\t\tvehiclePayload.push(null);\n\t\t}\n\n\t\t// Create a new Location object and add it to the list\n\t\tlet loc = new Location(payload[0], payload[1], payload[2], payload[3], payload[4], vehicleTypes, vehiclePayload);\n\t\tlocations.push(loc);\n\t\tg.addVertex(loc);\n\t\treturn loc;\n\t});\n}\n\nexport const loadPassengers = () => {\n\tconst passengersTxt = fs.readFileSync(path.join(__dirname, '../src/settings/People.txt'), 'utf8');\n\tconst lines = passengersTxt.split('\\n').slice(1);   // name,currentLocation,destination,preference,vehiclePreference\n\treturn lines.map((line) => {\n\t\tlet payload = line.split(\",\");\n\t\tlet passenger = new Passenger(payload[0].trim(), g.graph[payload[1]], g.graph[payload[2]], parseInt(payload[3]), payload[4].trim());\n\t\tpassengers.push(passenger);\n\t\treturn passenger;\n\t})\n}\n\nexport const loadPaths = () => {\n\tconst pathsTxt = fs.readFileSync(path.join(__dirname, '../src/settings/Paths.txt'), 'utf8');\n\tconst lines = pathsTxt.trim().split(/\\s*[\\r\\n]+\\s*/g).slice(1);    // startPoint,destPoint\n\treturn lines.map((line) => {\n\t\tlet payload = line.split(\",\");\n\t\tlet from = g.graph[payload[0]];\n\t\tlet to = g.graph[payload[1]];\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tif (from.vehicleTypes[i] && to.vehicleTypes[i])\n\t\t\t\tg.addEdge(from, to, getDistance(from,to), from.vehicles[i]);\n\t\t}\n\t\treturn [from,to];\n\t})\n}","// Here is the starting point for your application code.\n\n// Small helpers you might want to keep\nimport './helpers/context_menu.js';\nimport './helpers/external_links.js';\n\n// All stuff below is just to show you how it works. You can delete all of it.\n\nimport { loadPassengers, loadVehicles, loadLocations, loadPaths } from './settings/settings';\nimport { locations, g, passengers } from './settings/settings';\nimport { getShortestPathTo } from './lib/graph';\nimport p5 from 'p5';\n\nlet root = document.querySelector('#root');\n\nconst sketch = (p) => {\n  let bg, x, y;\n  let path = [];\n  let passengerIndex = 0;\n  let locIndex = 1;\n  let h = 20;\n  let labels = [];\n\n  p.setup = () => {\n    let canvas = p.createCanvas(1700,900);\n    canvas.parent('root')\n    bg = p.loadImage('../build/icons/Map.PNG');\n    loadVehicles();\n    loadLocations();\n    loadPaths();\n    loadPassengers();\n\n\n    passengers.forEach((passenger) => {\n        g.computePaths(passenger);\n        let personPath = getShortestPathTo(passenger.dest)\n        if (personPath[0] == personPath[1])\n            passenger.setPath([passenger.currentLoc, passenger.currentLoc])\n        else\n            passenger.setPath(personPath)\n\n        console.log(`${passenger.name}'s path using ${passenger.vehiclePreference}:`);\n        let pathString = passenger.path.map(loc => loc.name).join(', ');\n        console.log(`${pathString}`);\n    });\n\n    p.background(255);\n\n    path = passengers[passengerIndex].path;\n    x = path[0].x;\n    y = path[0].y;\n  }\n\n  p.draw = () => {\n    p.image(bg, 0, 0);\n    p.frameRate(30);\n\n    // Map all locations\n    locations.forEach((loc) => {\n        p.fill(255, 0, 0);\n        p.ellipse(loc.x, loc.y, 20,20);\n\n        // San Ramon and Dublin are not on the Google Maps image\n        if (loc.name == (\"San Ramon\") || loc.name == (\"Dublin\")) {\n            p.fill(0);\n            p.textSize(13);\n            p.text(loc.name, loc.x - 30, loc.y - 20);\n        }\n\n        // For each adjacent location, draw a line between them\n        loc.vehicles.forEach((vehicle) => {\n            if (vehicle != null) {\n                loc.adjacent.get(vehicle).forEach((e) => {\n                    p.line(loc.x, loc.y, e.to.x, e.to.y);\n                });\n            }\n        });\n    });\n\n    x = p.lerp(parseFloat(x), parseFloat(path[locIndex].x), 0.1);\n    y = p.lerp(parseFloat(y), parseFloat(path[locIndex].y), 0.1);\n\n    // Create a circle that represents the current passenger as they traverse the graph and add their name above it\n    p.fill(0,175,255);\n    p.ellipse(x,y,25,25);\n    p.fill(0);\n    p.text(passengers[passengerIndex].name, x-10, y);\n\n    // Once a passenger arrives at their next location, if they arrive at their destination, go to the next person, otherwise, go to next location\n    if (Math.abs(x - parseFloat(path[locIndex].x)) < 1 || Math.abs(y - parseFloat(path[locIndex].y)) < 1){\n        let changedPaths = false;\n\n        // If passenger has reached their destination\n        if ((locIndex + 1) == path.length) {\n            // If last passenger has reached their destination\n            if ((passengerIndex + 1) == passengers.length) {\n                console.log(\"FINISHED!\");\n                // Print the last person's name at their finishing position\n                p.fill(60, 0, 110);\n                p.textSize(20);\n                p.text(passengers[passengerIndex].name, x-10, y-20);\n\n                // Print all passenger's paths in the white space to the right\n                passengers.forEach((passenger) => {\n                    // If passenger could not find a path to their destination, their path would be: [currentLoc, currentLoc]\n                    if (passenger.path[0] == passenger.path[1]) \n                        p.text(`No possible path for ${passenger.name} to go from ${passenger.currentLoc.name} to ${passenger.dest.name} using a %s\\n`, 720, h);\n                    \n                    else\n                        p.text(`${passenger.name}'s path: ${passenger.path.map(loc => loc.name).join(', ')} Using: ${passenger.vehiclePreference}   Total Cost: ${passenger.calculateCost().toLocaleString('en-US', { style: \"currency\", currency: \"USD\" })}\\n`, 720,h);\n                    \n                    h += 20;\n                })\n\n\n                // Stop drawing\n                p.noLoop();\n            }\n\n            // If passenger has reached their destination, get next passenger\n            else {\n                labels.push({\n                    \"name\": passengers[passengerIndex].name,\n                    \"x\": x-10,\n                    \"y\": y-20\n                });\n                passengerIndex++;\n                locIndex = 1;\n                changedPaths = true;\n            }\n        }\n\n        // Otherwise, continue to the next location\n        else{\n            locIndex++;\n        }\n\n        path = passengers[passengerIndex].path;\n\n        // If passenger has changed, set x and y to the coordinates of their current location\n        if (changedPaths) {\n            x = path[0].x;\n            y = path[0].y;\n        }\n    }\n\n    labels.forEach((label) => {\n        p.fill(60, 0, 110);\n        p.textSize(20);\n        p.text(label.name, label.x, label.y);\n    });\n  }\n\n  p.mousePressed = (e) => {\n\tconsole.log(`(${e.x}, ${e.y})`);\n  }\n}\n\nnew p5(sketch);"],"names":["Menu","remote","MenuItem","isAnyTextSelected","window","getSelection","toString","cut","execCommand","copy","paste","normalMenu","append","textEditingMenu","document","addEventListener","event","target","nodeName","preventDefault","popup","getCurrentWindow","supportExternalLinks","href","isExternal","checkDomElement","element","getAttribute","classList","contains","openExternal","parentElement","Vehicle","name","speedOfTravel","waitTime","unitCost","typeOfCost","location","undefined","distance","vehicleNames","Graph","graph","node","from","to","weight","type","containsLocation","addVertex","addNeighbor","p","source","currentLoc","values","forEach","x","dist","Infinity","prev","vertexQueue","TinyQueue","a","b","push","u","pop","pref","vehiclePreference","adj","adjacent","get","vehicles","e","v","alt","data","filter","loc","peek","getShortestPathTo","path","vertex","reverse","length","Edge","vehicleType","require","Location","latitude","longitude","y","vehicleTypes","neighbor","vehicle","includes","lat","lon","Map","set","getDistance","loc1","loc2","Math","sqrt","pow","getHaversineDistance","l1","l2","lat1","lon1","lat2","lon2","R","φ1","PI","φ2","Δφ","Δλ","sin","cos","c","atan2","d","Passenger","dest","preference","cost","i","calculateCostOfTravel","g","locations","passengers","loadVehicles","loadLocations","locationsTxt","fs","readFileSync","join","__dirname","lines","split","slice","map","line","payload","types","Array","vehiclePayload","loadPassengers","passengersTxt","passenger","trim","parseInt","loadPaths","pathsTxt","addEdge","root","querySelector","sketch","bg","passengerIndex","locIndex","h","labels","setup","canvas","createCanvas","parent","loadImage","computePaths","personPath","setPath","log","pathString","background","draw","image","frameRate","fill","ellipse","textSize","text","lerp","parseFloat","abs","changedPaths","calculateCost","toLocaleString","style","currency","noLoop","label","mousePressed","p5"],"mappings":"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"}