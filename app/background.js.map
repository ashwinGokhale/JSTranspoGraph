{"version":3,"file":"background.js","sources":["src/menu/dev_menu_template.js","src/menu/edit_menu_template.js","src/helpers/window.js","src/env.js","src/background.js"],"sourcesContent":["import { app, BrowserWindow } from 'electron';\n\nexport const devMenuTemplate = {\n  label: 'Development',\n  submenu: [{\n    label: 'Reload',\n    accelerator: 'CmdOrCtrl+R',\n    click: () => {\n      BrowserWindow.getFocusedWindow().webContents.reloadIgnoringCache();\n    },\n  },\n  {\n    label: 'Toggle DevTools',\n    accelerator: 'Alt+CmdOrCtrl+I',\n    click: () => {\n      BrowserWindow.getFocusedWindow().toggleDevTools();\n    },\n  },\n  {\n    label: 'Quit',\n    accelerator: 'CmdOrCtrl+Q',\n    click: () => {\n      app.quit();\n    },\n  }],\n};\n","export const editMenuTemplate = {\n  label: 'Edit',\n  submenu: [\n    { label: 'Undo', accelerator: 'CmdOrCtrl+Z', selector: 'undo:' },\n    { label: 'Redo', accelerator: 'Shift+CmdOrCtrl+Z', selector: 'redo:' },\n    { type: 'separator' },\n    { label: 'Cut', accelerator: 'CmdOrCtrl+X', selector: 'cut:' },\n    { label: 'Copy', accelerator: 'CmdOrCtrl+C', selector: 'copy:' },\n    { label: 'Paste', accelerator: 'CmdOrCtrl+V', selector: 'paste:' },\n    { label: 'Select All', accelerator: 'CmdOrCtrl+A', selector: 'selectAll:' },\n  ],\n};\n","// This helper remembers the size and position of your windows (and restores\n// them in that place after app relaunch).\n// Can be used for more than one window, just construct many\n// instances of it and give each different name.\n\nimport { app, BrowserWindow, screen } from 'electron';\nimport jetpack from 'fs-jetpack';\n\nexport default (name, options) => {\n  const userDataDir = jetpack.cwd(app.getPath('userData'));\n  const stateStoreFile = `window-state-${name}.json`;\n  const defaultSize = {\n    width: options.width,\n    height: options.height,\n  };\n  let state = {};\n  let win;\n\n  const restore = () => {\n    let restoredState = {};\n    try {\n      restoredState = userDataDir.read(stateStoreFile, 'json');\n    } catch (err) {\n      // For some reason json can't be read (might be corrupted).\n      // No worries, we have defaults.\n    }\n    return Object.assign({}, defaultSize, restoredState);\n  };\n\n  const getCurrentPosition = () => {\n    const position = win.getPosition();\n    const size = win.getSize();\n    return {\n      x: position[0],\n      y: position[1],\n      width: size[0],\n      height: size[1],\n    };\n  };\n\n  const windowWithinBounds = (windowState, bounds) => {\n    return windowState.x >= bounds.x\n      && windowState.y >= bounds.y\n      && windowState.x + windowState.width <= bounds.x + bounds.width\n      && windowState.y + windowState.height <= bounds.y + bounds.height;\n  };\n\n  const resetToDefaults = () => {\n    const bounds = screen.getPrimaryDisplay().bounds;\n    return Object.assign({}, defaultSize, {\n      x: (bounds.width - defaultSize.width) / 2,\n      y: (bounds.height - defaultSize.height) / 2,\n    });\n  };\n\n  const ensureVisibleOnSomeDisplay = (windowState) => {\n    const visible = screen.getAllDisplays().some((display) => {\n      return windowWithinBounds(windowState, display.bounds);\n    });\n    if (!visible) {\n      // Window is partially or fully not visible now.\n      // Reset it to safe defaults.\n      return resetToDefaults();\n    }\n    return windowState;\n  };\n\n  const saveState = () => {\n    if (!win.isMinimized() && !win.isMaximized()) {\n      Object.assign(state, getCurrentPosition());\n    }\n    userDataDir.write(stateStoreFile, state, { atomic: true });\n  };\n\n  state = ensureVisibleOnSomeDisplay(restore());\n\n  win = new BrowserWindow(Object.assign({}, options, state));\n\n  win.on('close', saveState);\n\n  return win;\n};\n","// Simple wrapper exposing environment variables to rest of the code.\n\nimport jetpack from 'fs-jetpack';\n\n// The variables have been written to `env.json` by the build process.\nconst env = jetpack.cwd(__dirname).read('env.json', 'json');\n\nexport default env;\n","// This is main process of Electron, started as first thing when your\n// app starts. This script is running through entire life of your application.\n// It doesn't have any windows which you can see on screen, but we can open\n// window from here.\n\nimport path from 'path';\nimport url from 'url';\nimport { app, Menu } from 'electron';\nimport { devMenuTemplate } from './menu/dev_menu_template';\nimport { editMenuTemplate } from './menu/edit_menu_template';\nimport createWindow from './helpers/window';\n\n// Special module holding environment variables which you declared\n// in config/env_xxx.json file.\nimport env from './env';\n\nconst setApplicationMenu = () => {\n  const menus = [editMenuTemplate];\n  if (env.name !== 'production') {\n    menus.push(devMenuTemplate);\n  }\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menus));\n};\n\n// Save userData in separate folders for each environment.\n// Thanks to this you can use production and development versions of the app\n// on same machine like those are two separate apps.\nif (env.name !== 'production') {\n  const userDataPath = app.getPath('userData');\n  app.setPath('userData', `${userDataPath} (${env.name})`);\n}\n\napp.on('ready', () => {\n  setApplicationMenu();\n\n  const mainWindow = createWindow('main', {\n    width: 1700,\n    height: 900,\n  });\n\n  mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, 'app.html'),\n    protocol: 'file:',\n    slashes: true,\n  }));\n\n  if (env.name === 'development') {\n    mainWindow.openDevTools();\n  }\n});\n\napp.on('window-all-closed', () => {\n  app.quit();\n});\n"],"names":["devMenuTemplate","getFocusedWindow","webContents","reloadIgnoringCache","toggleDevTools","quit","editMenuTemplate","label","accelerator","selector","type","name","options","userDataDir","jetpack","cwd","app","getPath","stateStoreFile","defaultSize","width","height","state","win","getCurrentPosition","position","getPosition","size","getSize","windowWithinBounds","windowState","bounds","x","y","resetToDefaults","screen","getPrimaryDisplay","Object","assign","getAllDisplays","some","display","restoredState","read","err","BrowserWindow","on","isMinimized","isMaximized","write","atomic","env","__dirname","setApplicationMenu","menus","push","Menu","buildFromTemplate","userDataPath","setPath","mainWindow","createWindow","loadURL","url","format","path","join","openDevTools"],"mappings":"2PAEaA,uBACJ,8BAEE,qBACM,oBACN,kCACSC,mBAAmBC,YAAYC,+BAIxC,8BACM,wBACN,kCACSF,mBAAmBG,0BAI5B,mBACM,oBACN,wBACDC,WCtBGC,wBACJ,iBAEHC,MAAO,OAAQC,YAAa,cAAeC,SAAU,UACrDF,MAAO,OAAQC,YAAa,oBAAqBC,SAAU,UAC3DC,KAAM,cACNH,MAAO,MAAOC,YAAa,cAAeC,SAAU,SACpDF,MAAO,OAAQC,YAAa,cAAeC,SAAU,UACrDF,MAAO,QAASC,YAAa,cAAeC,SAAU,WACtDF,MAAO,aAAcC,YAAa,cAAeC,SAAU,sCCDjDE,EAAMC,OACdC,EAAcC,QAAQC,IAAIC,aAAIC,QAAQ,aACtCC,kBAAiCP,UACjCQ,SACGP,EAAQQ,aACPR,EAAQS,QAEdC,KACAC,SAaEC,EAAqB,eACnBC,EAAWF,EAAIG,cACfC,EAAOJ,EAAIK,mBAEZH,EAAS,KACTA,EAAS,SACLE,EAAK,UACJA,EAAK,KAIXE,EAAqB,SAACC,EAAaC,UAChCD,EAAYE,GAAKD,EAAOC,GAC1BF,EAAYG,GAAKF,EAAOE,GACxBH,EAAYE,EAAIF,EAAYV,OAASW,EAAOC,EAAID,EAAOX,OACvDU,EAAYG,EAAIH,EAAYT,QAAUU,EAAOE,EAAIF,EAAOV,QAGzDa,EAAkB,eAChBH,EAASI,gBAAOC,oBAAoBL,cACnCM,OAAOC,UAAWnB,MACnBY,EAAOX,MAAQD,EAAYC,OAAS,KACpCW,EAAOV,OAASF,EAAYE,QAAU,cAIX,SAACS,UAClBK,gBAAOI,iBAAiBC,KAAK,SAACC,UACrCZ,EAAmBC,EAAaW,EAAQV,UAO1CD,EAFEI,KA5CK,eACVQ,WAEc7B,EAAY8B,KAAKzB,EAAgB,QACjD,MAAO0B,WAIFP,OAAOC,UAAWnB,EAAauB,UAkDlC,IAAIG,uBAAcR,OAAOC,UAAW1B,EAASU,KAE/CwB,GAAG,QAXW,WACXvB,EAAIwB,eAAkBxB,EAAIyB,sBACtBV,OAAOhB,EAAOE,OAEXyB,MAAM/B,EAAgBI,GAAS4B,QAAQ,MAS9C3B,GC3EH4B,IAAMrC,QAAQC,IAAIqC,WAAWT,KAAK,WAAY,QCW9CU,mBAAqB,eACnBC,GAAShD,kBACE,eAAb6C,IAAIxC,QACA4C,KAAKvD,+BAERqD,mBAAmBG,cAAKC,kBAAkBH,KAMjD,GAAiB,eAAbH,IAAIxC,KAAuB,KACvB+C,aAAe1C,aAAIC,QAAQ,yBAC7B0C,QAAQ,WAAeD,kBAAiBP,IAAIxC,UAGlDK,aAAI8B,GAAG,QAAS,oCAGRc,EAAaC,aAAa,cACvB,YACC,QAGCC,QAAQC,IAAIC,iBACXC,KAAKC,KAAKd,UAAW,qBACrB,iBACD,KAGM,gBAAbD,IAAIxC,QACKwD,iBAIfnD,aAAI8B,GAAG,oBAAqB,wBACtBzC"}