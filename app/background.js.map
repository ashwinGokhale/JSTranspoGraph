{"version":3,"file":"background.js","sources":["src/menu/dev_menu_template.js","src/menu/edit_menu_template.js","src/helpers/window.js","src/env.js","src/background.js"],"sourcesContent":["import { app, BrowserWindow } from 'electron';\n\nexport const devMenuTemplate = {\n  label: 'Development',\n  submenu: [{\n    label: 'Reload',\n    accelerator: 'CmdOrCtrl+R',\n    click: () => {\n      BrowserWindow.getFocusedWindow().webContents.reloadIgnoringCache();\n    },\n  },\n  {\n    label: 'Toggle DevTools',\n    accelerator: 'Alt+CmdOrCtrl+I',\n    click: () => {\n      BrowserWindow.getFocusedWindow().toggleDevTools();\n    },\n  },\n  {\n    label: 'Quit',\n    accelerator: 'CmdOrCtrl+Q',\n    click: () => {\n      app.quit();\n    },\n  }],\n};\n","export const editMenuTemplate = {\n  label: 'Edit',\n  submenu: [\n    { label: 'Undo', accelerator: 'CmdOrCtrl+Z', selector: 'undo:' },\n    { label: 'Redo', accelerator: 'Shift+CmdOrCtrl+Z', selector: 'redo:' },\n    { type: 'separator' },\n    { label: 'Cut', accelerator: 'CmdOrCtrl+X', selector: 'cut:' },\n    { label: 'Copy', accelerator: 'CmdOrCtrl+C', selector: 'copy:' },\n    { label: 'Paste', accelerator: 'CmdOrCtrl+V', selector: 'paste:' },\n    { label: 'Select All', accelerator: 'CmdOrCtrl+A', selector: 'selectAll:' },\n  ],\n};\n","// This helper remembers the size and position of your windows (and restores\n// them in that place after app relaunch).\n// Can be used for more than one window, just construct many\n// instances of it and give each different name.\n\nimport { app, BrowserWindow, screen } from 'electron';\nimport jetpack from 'fs-jetpack';\n\nexport default (name, options) => {\n  const userDataDir = jetpack.cwd(app.getPath('userData'));\n  const stateStoreFile = `window-state-${name}.json`;\n  const defaultSize = {\n    width: options.width,\n    height: options.height,\n  };\n  let state = {};\n  let win;\n\n  const restore = () => {\n    let restoredState = {};\n    try {\n      restoredState = userDataDir.read(stateStoreFile, 'json');\n    } catch (err) {\n      // For some reason json can't be read (might be corrupted).\n      // No worries, we have defaults.\n    }\n    return Object.assign({}, defaultSize, restoredState);\n  };\n\n  const getCurrentPosition = () => {\n    const position = win.getPosition();\n    const size = win.getSize();\n    return {\n      x: position[0],\n      y: position[1],\n      width: size[0],\n      height: size[1],\n    };\n  };\n\n  const windowWithinBounds = (windowState, bounds) => {\n    return windowState.x >= bounds.x\n      && windowState.y >= bounds.y\n      && windowState.x + windowState.width <= bounds.x + bounds.width\n      && windowState.y + windowState.height <= bounds.y + bounds.height;\n  };\n\n  const resetToDefaults = () => {\n    const bounds = screen.getPrimaryDisplay().bounds;\n    return Object.assign({}, defaultSize, {\n      x: (bounds.width - defaultSize.width) / 2,\n      y: (bounds.height - defaultSize.height) / 2,\n    });\n  };\n\n  const ensureVisibleOnSomeDisplay = (windowState) => {\n    const visible = screen.getAllDisplays().some((display) => {\n      return windowWithinBounds(windowState, display.bounds);\n    });\n    if (!visible) {\n      // Window is partially or fully not visible now.\n      // Reset it to safe defaults.\n      return resetToDefaults();\n    }\n    return windowState;\n  };\n\n  const saveState = () => {\n    if (!win.isMinimized() && !win.isMaximized()) {\n      Object.assign(state, getCurrentPosition());\n    }\n    userDataDir.write(stateStoreFile, state, { atomic: true });\n  };\n\n  state = ensureVisibleOnSomeDisplay(restore());\n\n  win = new BrowserWindow(Object.assign({}, options, state));\n\n  win.on('close', saveState);\n\n  return win;\n};\n","// Simple wrapper exposing environment variables to rest of the code.\n\nimport jetpack from 'fs-jetpack';\n\n// The variables have been written to `env.json` by the build process.\nconst env = jetpack.cwd(__dirname).read('env.json', 'json');\n\nexport default env;\n","// This is main process of Electron, started as first thing when your\n// app starts. This script is running through entire life of your application.\n// It doesn't have any windows which you can see on screen, but we can open\n// window from here.\n\nimport path from 'path';\nimport url from 'url';\nimport { app, Menu } from 'electron';\nimport { devMenuTemplate } from './menu/dev_menu_template';\nimport { editMenuTemplate } from './menu/edit_menu_template';\nimport createWindow from './helpers/window';\n\n// Special module holding environment variables which you declared\n// in config/env_xxx.json file.\nimport env from './env';\n\nconst setApplicationMenu = () => {\n  const menus = [editMenuTemplate];\n  if (env.name !== 'production') {\n    menus.push(devMenuTemplate);\n  }\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menus));\n};\n\n// Save userData in separate folders for each environment.\n// Thanks to this you can use production and development versions of the app\n// on same machine like those are two separate apps.\nif (env.name !== 'production') {\n  const userDataPath = app.getPath('userData');\n  app.setPath('userData', `${userDataPath} (${env.name})`);\n}\n\napp.on('ready', () => {\n  setApplicationMenu();\n\n  const mainWindow = createWindow('main', {\n    width: 1700,\n    height: 900,\n  });\n\n  mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, 'app.html'),\n    protocol: 'file:',\n    slashes: true,\n  }));\n\n  if (env.name === 'development') {\n    mainWindow.openDevTools();\n  }\n});\n\napp.on('window-all-closed', () => {\n  app.quit();\n});\n"],"names":["devMenuTemplate","getFocusedWindow","webContents","reloadIgnoringCache","toggleDevTools","quit","editMenuTemplate","label","accelerator","selector","type","name","options","userDataDir","jetpack","cwd","app","getPath","stateStoreFile","defaultSize","width","height","state","win","restore","restoredState","read","err","Object","assign","getCurrentPosition","position","getPosition","size","getSize","windowWithinBounds","windowState","bounds","x","y","resetToDefaults","screen","getPrimaryDisplay","ensureVisibleOnSomeDisplay","visible","getAllDisplays","some","display","saveState","isMinimized","isMaximized","write","atomic","BrowserWindow","on","env","__dirname","setApplicationMenu","menus","push","Menu","buildFromTemplate","userDataPath","setPath","mainWindow","createWindow","loadURL","url","format","path","join","openDevTools"],"mappings":"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"}